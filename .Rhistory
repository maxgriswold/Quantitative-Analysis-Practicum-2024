ggplot(df_plot, aes(y = p_income, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = p_income ~ age, color = "red") +
theme_bw()
ggplot(df_plot, aes(y = p_income, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = y ~ x, color = "red") +
theme_bw()
summary(lm(p_income ~ age, df_plot))
122.42*20
summary(lm(p_income ~ age + age^2, df_plot))
summary(lm(p_income ~ age + age^2, df_plot))
lm(p_income ~ age + age^2, df_plot)
lm(p_income ~ age + age**2, df_plot)
lm(p_income ~ age + age**2, df_plot)
lm(p_income ~ age + I(age^2), df_plot)
summary(lm(p_income ~ age + I(age^2), df_plot))
1e6
1e6 == 100000
1e6 == 10000
ggplot(df_plot, aes(y = p_income, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = y ~ x, color = "red") +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "blue") +
lims(y = c(0, 1e5))
theme_bw()
ggplot(df_plot, aes(y = p_income, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = y ~ x, color = "red") +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "blue") +
lims(y = c(0, 1e5)) +
theme_bw()
df_plot[, p_income_ln := ln(p_income)]
df_plot[, p_income_ln := log(p_income)]
ggplot(df_plot, aes(y = p_income_ln, x = age, color = employment_status)) +
geom_point(alpha = 0.05) +
theme_bw()
df_plot[, p_income_ln := log(p_income)]
ggplot(df_plot, aes(y = p_income_ln, x = age, color = employment_status)) +
geom_point(alpha = 0.1) +
theme_bw()
ggplot(df_plot, aes(y = p_income_ln, x = age, color = employment_status)) +
geom_point(alpha = 0.4) +
theme_bw()
. df_plot_subset <- df_plot[employment_status == "employed",]
df_plot_subset <- df_plot[employment_status == "employed",]
summary(lm(p_income_ln ~ age, df_plot_subset))
exp(0.02)
exp(0.02)*40
exp(0.02)*80
ggplot(df_plot_subset, aes(y = p_income_ln, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = y ~ x, color = "red") +
theme_bw()
summary(lm(p_income_ln ~ age + I(age^2), df_plot_subset))
ggplot(df_plot_subset, aes(y = p_income_ln, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = y ~ x, color = "red") +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "blue") +
lims(y = c(0, 1e5)) +
theme_bw()
summary(lm(p_income_ln ~ age + I(age^2), df_plot_subset))
ggplot(df_plot_subset, aes(y = p_income_ln, x = age)) +
geom_point(alpha = 0.05) +
geom_smooth(method='lm', formula = y ~ x, color = "red") +
geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "blue") +
theme_bw()
gc()
x <- rnorm(100)
y <- exp(rnorm(100) + x)
plot(y, x)
plot(y, x)x <- rnorm(1000)
x <- rnorm(1000)
x <- rnorm(1000)
y <- exp(rnorm(1000) + x)
plot(y, x)
x <- rnorm(1000)
y <- exp(rnorm(1000) + x)*1000
x <- exp(rlnorm(1000))
x
y <- exp(rnorm(1000) + x)*1000
plot(x, y)
x <- runif(1000, 0, 80)
x
plot(x)
plot(y)
plot(y, x)
x <- log(runif(1000, 18, 80))
y <- exp(rnorm(1000) + x)
plot(x, y)
x <- exp(log(runif(1000, 18, 80)))
x
exp(rnorm(1000)
)
exp(rnorm(1000))*1000
exp(rnorm(1000))*10000
plot(exp(rnorm(1000))*10000)
plot(exp(rnorm(1000))*50000)
x <- runif(1000, 18, 80)
y <- exp(rnorm(1000)*50000 + 200*x)
plot(log(y), x)
y
x <- runif(1000, 18, 80)
y <- exp(rnorm(1000) + 200*x)
y
y <- rlnorm(10000, meanlog = 1, sdlog = 0.25)
y
exp(y)
plot(exp(y))
plot(exp(y))*1000
plot(exp(y)*1000)
rlnorm(10000, meanlog = 1, sdlog = 0.25)
rlnorm(10000, meanlog = 1, sdlog = 0.25)*10000
x <- runif(1000, 18, 80)
y <- rlnorm(10000, meanlog = 1, sdlog = 0.25)*10000 + 200*x
plot(y, x)
x <- runif(1000, 18, 80)
y <- rlnorm(1000, meanlog = 1, sdlog = 0.25)*10000 + 200*x
plot(y, x)
plot(x, y)
plot(rlnorm(1000, meanlog = 1, sdlog = 0.25))
exp(plot(rlnorm(1000, meanlog = 1, sdlog = 0.25)))
plot(exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)))
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*10000 + 200*x
plot(y, x)
plot(x, y)
plot(x, y, ylim = c(0, 200000))
plot(x, y, ylim = c(0, 500000))
exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000
summary(exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000)
plot(density(exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000))
80*200
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000 + 200*x
plot(x, y, ylim = c(0, 500000))
plot(x, log(y))
plot(x, y, ylim = c(0, 500000))
abline(lm(y ~ x))
plot(x, y, ylim = c(0, 500000))
abline(lm(y ~ x), col = 'red', lwd = 2)
abline(lm(log(y) ~ x), col = 'blue', lwd = 2)
abline(exp(lm(log(y) ~ x)), col = 'blue', lwd = 2)
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000 + 200*x
plot(x, y, ylim = c(0, 500000))
abline(lm(y ~ x), col = 'red', lwd = 2)
mod <- lm(log(y) ~ x)
pred <- exp(predict(mod))
lines(x, pred, col = "blue", lwd = 2)
library(ggplot2)
library(ggplot2)
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000 + 200*x
mod1  <- lm(y ~ x)
pred1 <- predict(mod)
mod2 <- lm(log(y) ~ x)
pred2 <- exp(predict(mod))
res <- data.table('income' = y, 'age' = x, 'pred1' = pred1, 'pred2' = pred2)
res
mod1
predict(mod1)
library(ggplot2)
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25))*5000 + 200*x
mod1  <- lm(y ~ x)
pred1 <- predict(mod1)
mod2 <- lm(log(y) ~ x)
pred2 <- exp(predict(mod2))
res <- data.table('income' = y, 'age' = x, 'pred1' = pred1, 'pred2' = pred2)
res
ggplot(res, aes(x = age, y = income)) +
geom_point() +
geom_line(aes(y = pred1), color = 'red', size = 1) +
geom_line(aes(y = pred2), color = 'blue', size = 1) +
theme_bw()
ggplot(res, aes(x = age, y = income)) +
geom_point() +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
lims(y = c(0, 400000)) +
theme_bw()
ggplot(res, aes(x = age, y = income)) +
geom_point(size = 1, shape = 2) +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
lims(y = c(0, 400000),) +
theme_bw()
ggplot(res, aes(x = age, y = income)) +
geom_point(size = 2, shape = 1) +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
lims(y = c(0, 400000),) +
theme_bw()
exp92
exp(2)
exp(1.2)
exp(1.05)
exp(1.02)
exp(1.01)
exp(1.001)
exp(0.8)
exp(0.5)
exp(0.2)
exp(0.05)
exp(0.02)
options(warn=1)
library(ggplot2)
library(data.table)
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)*5000*0.02*x)
mod1  <- lm(y ~ x)
y
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)*0.02*x)*5000
y
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)*0.02*x)*5000
mod1  <- lm(y ~ x)
pred1 <- predict(mod1)
mod2 <- lm(log(y) ~ x)
pred2 <- exp(predict(mod2))
res <- data.table('income' = y, 'age' = x, 'pred1' = pred1, 'pred2' = pred2)
ggplot(res, aes(x = age, y = income)) +
geom_point(size = 2, shape = 1) +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
lims(y = c(0, 400000),) +
theme_bw()
ggplot(res, aes(x = age, y = income)) +
geom_point(size = 2, shape = 1) +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
scale_y_continuous(labels = scales::comma) +
lims(y = c(0, 500000),) +
theme_bw() +
theme(axis.title.y = element_text(angle = 0))
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)*0.02*x)*5000
mod1  <- lm(y ~ x)
pred1 <- predict(mod1)
mod2 <- lm(log(y) ~ x)
pred2 <- exp(predict(mod2))
res <- data.table('Wealt' = y, 'Age' = x, 'pred1' = pred1, 'pred2' = pred2)
ggplot(res, aes(x = age, y = wealt)) +
geom_point(size = 2, shape = 1) +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
scale_y_continuous(labels = scales::comma,
limits = c(0, 500000)) +
theme_bw() +
theme(axis.title.y = element_text(angle = 0))
library(ggplot2)
library(data.table)
x <- runif(1000, 18, 80)
y <- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)*0.02*x)*5000
mod1  <- lm(y ~ x)
pred1 <- predict(mod1)
mod2 <- lm(log(y) ~ x)
pred2 <- exp(predict(mod2))
res <- data.table('Wealth' = y, 'Age' = x, 'pred1' = pred1, 'pred2' = pred2)
ggplot(res, aes(x = Age, y = Wealth)) +
geom_point(size = 2, shape = 1) +
geom_line(aes(y = pred1), color = 'red', linewidth = 1) +
geom_line(aes(y = pred2), color = 'blue', linewidth = 1) +
scale_y_continuous(labels = scales::comma,
limits = c(0, 500000)) +
theme_bw() +
theme(axis.title.y = element_text(angle = 0))
library(data.table)
df <- data.table(x = rnorm(1000, mean = 1, sd = 0.5),
y = rnorm(1000, mean = 2, sd = 2))
plot(df$y, df$x)
df <- data.table(x = rnorm(1000, mean = 1, sd = 0.5),
y = rnorm(1000, mean = 2, sd = 2))
plot(df$y, df$x)
df <- data.table(x = rnorm(1000, mean = 1, sd = 0.5),
y = rnorm(1000, mean = 2, sd = 2)^2)
plot(df$y, df$x)
df <- data.table(x = rnorm(1000, mean = 1, sd = 0.5),
y = rnorm(1000, mean = 2, sd = 2)^2)
plot(df$x, df$y)
df <- data.table(x = rnorm(1000, mean = 1, sd = 0.5),
y = rnorm(1000, mean = 2, sd = 2)^2)
plot(df$x, df$y, xlab = "X", ylab = "Y")
df <- data.table(x = rnorm(1000, mean = 1, sd = 0.5),
y = rnorm(1000, mean = 2, sd = 2)^2)
plot(df$x, df$y, xlab = "X", ylab = "Y")
rnorm(100)
rnorm(100) + dose*10
dose <- 0:100
rnorm(100) + dose*10
rnorm(100) + dose*5
dose <- 0:100
severity <- exp(rlnorm(100) + dose*2)
severity
dose <- 0:100
severity <- exp(rlnorm(101, meanlog = 0.1, sdlog = 0.02) + dose*2)
severity
dose <- 0:100
severity <- exp(rlnorm(101, meanlog = 0.1, sdlog = 0.02)) + dose*2
severity
dose <- 0:100
severity <- exp(rlnorm(101, meanlog = 0.1, sdlog = 0.02)) + dose*2
plot(dose, severity)
exp(rlnorm(101, meanlog = 0.1, sdlog = 0.02))
exp(rlnorm(101, meanlog = 0.1, sdlog = 0.05))
exp(rlnorm(101, meanlog = 0.2, sdlog = 0.05))
exp(rlnorm(101, meanlog = 0.5, sdlog = 0.05))
exp(rlnorm(101, meanlog = 0.5, sdlog = 0.5))
exp(rlnorm(101, meanlog = 0.5, sdlog = 0.5))
exp(rlnorm(101, meanlog = 0.5, sdlog = 0.2))
dose <- 0:100
severity <- exp(rlnorm(101, meanlog = 0.5, sdlog = 0.2)) + dose/10
plot(dose, severity)
dose <- 0:100
severity <- exp(rlnorm(101, meanlog = 0.5, sdlog = 0.2)) + dose/10
plot(dose, severity,type = 'l')
Income <-  rgamma(n, 2, 3)*10000
Income <-  rgamma(10000, 2, 3)*10000
plot(density(Income))
Income <-  rgamma(100, 2, 3)*10000
plot(density(Income))
```{r, echo=T}
plot(hist(Income))
plot(hist(Income), breaks = 50)
plot(hist(Income, breaks = 50))
plot(hist(Income))
plot(hist(Income, breaks = 50))
plot(hist(Income, breaks = 100))
quantile(Income, probs = seq(0, 1, 0.1))
cor(Income)
age <- runif(1000, 18, 80)
income<- exp(rlnorm(1000, meanlog = 1, sdlog = 0.25)*0.02*x)*5000
cor(age, income)
df <- data.table(x = rnorm(100), y = rnorm(100), z = rnorm(100))
cor(df)
ggplot(df_plot, aes(x = year, y = mean_hours_percentile, color = hh_income_group)) +
geom_point(alpha = 0.1) +
geom_line(aes(y = preds), size = 1) +
labs(x = "Year", y = "Average hours worked",
fill = "Income percentile") +
guides(color = "none") +
theme_bw() +
theme(legend.position = "bottom")
df_plot <- cps[top_earner == 1 & employment_status == "employed" & !is.na(hours_per_week), ]
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(srvyr)
cps <- fread("./data/cps/cps_hours_worked_1980_2020.csv")
# Hold onto bare minimum columns we need for the analysis:
cps <- cps[, .(YEAR, MONTH, SERIAL, PERNUM, STATEFIP, GQ, HHINCOME, INCTOT, INCWELFR, INCRENT, EMPSTAT, AGE, SEX, MARST, RACE, WKSWORK1, UHRSWORKLY, WKSUNEM1, ASECWT)]
setnames(cps, names(cps), c("year", "month", "hhid", "pid", "state_fip", "group_quarters", "hh_income", "p_income", "income_welfare", "income_rent", "employment_status", "age", "sex", "marital_status", "race", "employed_weeks", "hours_per_week", "unemployed_weeks", "survey_weight"))
# Only hold onto observations living in households
cps <- cps[group_quarters == 1,]
####################
# Record variables #
####################
# I created a state fips dataset to merge on state names using the codebook.
# I'm using the join function from the "plyr" package because I prefer the
# syntax better than the "merge" function in base R.
state_fips <- fread("./data/helper/state_fips.csv")
cps <- join(cps, state_fips, by = "state_fip", type = "left")
# Checking to see if there's any oddities in the states
unique(cps$state)
#Nope
# Create new hhid, based on survey year. IPUMS CPS either provides a
# id based on longitudinal link or by year so we need a unique id
# across the series.
cps[, hhid := sprintf("%s_%s", year, hhid)]
# Remove children from the sample
cps <- cps[age >= 18,]
# Set ages above 90 to 90 since CPS started top-coding age in 1988:
cps[age >= 90, age := 90]
cps[, sex := ifelse(sex == 1, "male", "female")]
# Top-code race so that all the multiple categories are a single value. I'm
# doing this to make the recode easier:
cps[race > 800, race := 800]
cps[race >= 650 & race <= 652, race := 600]
new_race <- c("white", "black", "indigenous", "asian", "other", "multiple")
# Using the 'mapvalue' function from the plyr package to recode. I double-checked
# the coded values to ensure the order matched the new recodes.
cps[, race := mapvalues(race, sort(unique(cps$race)), new_race)]
# Coding both divorced and widowed as "former". Also, coding married with spouse
# as former, if hh_income is the same as personal income or married, if otherwise.
cps[marital_status %in% c(3, 4, 5, 7), marital_status := 3]
cps[marital_status == 2 & hh_income == p_income, marital_status := 3]
cps[marital_status == 2 & hh_income != p_income, marital_status := 1]
new_marry <- c("married", "former", "single")
cps[, marital_status := mapvalues(marital_status, sort(unique(cps$marital_status)), new_marry)]
# Simply recode employment status to either working, unemployed, or retired. Ignore
# the distinction between not in labor force and unemployed:
cps[employment_status <= 12, employment_status := 10]
cps[employment_status >= 20 & employment_status <= 35, employment_status := 20]
cps[employment_status == 36, employment_status := 30]
new_employ <- c("employed", "unemployed", "retired")
cps[, employment_status := mapvalues(employment_status, sort(unique(cps$employment_status)), new_employ)]
cps[hours_per_week == 999, hours_per_week := NA]
# Check if there are any inconsistencies in number of weeks worked and
# employment status:
cps[employment_status != "employed" & employed_weeks > 0]
# Looking at codebook, this variable indicates if they were unemployed within
# 4 weeks of when the survey was issued, rather than if they were unemployed
# for a given period of time. So I'll need to keep this in mind.
cps[unemployed_weeks == 99, unemployed_weeks := NA]
# Check to see if there are any inconsistencies between unemployed weeks and
# weeks worked:
cps[, total_weeks := employed_weeks + unemployed_weeks]
sort(unique(cps$total_weeks))
# This looks strange - let's look at a cross section to see if we
# can figure out what's going on
cps[total_weeks == 4,]
# For values less than 52, I'm guessing this comes down to unemployment being
# a very specific definition. What about more than 52 weeks?
cps[total_weeks > 52]
# There's only 17 observations where this occurs so I'm guessing there's a
# miscoding problem. I'll impute unemployed weeks for these 17 individuals as
# being the difference between 52 weeks and weeks worked:
cps[total_weeks > 52, unemployed_weeks := 52 - employed_weeks]
# I had to look at the IPUMS CPS on top-coding to get a better sense on which variables
# I should modify concerning income: https://cps.ipums.org/cps/topcodes_tables.shtml
# However, the histograms of both hh_income and p_income appear to not be top-coded
# Not sure what's going on here (extends all the way to 3 million!)
quantile(cps$hh_income, probs = seq(0, 1, 0.1))
# Convert all income into 2022 dollars. I used the suggested inflation factors
# from IPUMS: https://cps.ipums.org/cps/cpi99.shtml
inflate <- fread("./data/helper/in_2022_dollars.csv")
cps <- join(cps, inflate, by = "year", type = "left")
cps[, hh_income := hh_income*adjustment]
cps[, p_income := p_income*adjustment]
# Let's create a new variable which corresponds to the FRED categories for income
# share. We'll need to calculate this separately for each year:
cps[, hh_income_rank := percent_rank(.SD$hh_income), by = "year"]
cps[, p_income_rank := percent_rank(.SD$p_income), by = "year"]
# Alternatively, I could calculate this using survey weights.
hh_income_share <- function(df){
hh_inc <- df$hh_income
df <- as_survey_design(df, weights = survey_weight)
# The idea here is to calculate weighted quantiles of household income, then
# use these quantiles to create categorical groups. To do that, once I get
# the quantiles, I will create a new dataframe which holds the upper value
# for each quantile. Then, I'll use the "cut" command in base
# R to map these quantiles to a new categorical group.
breaks <- df %>%
summarise(perc = survey_quantile(hh_income, c(0.01, 0.5, 0.9, 0.99, 1), vartype = NULL))
breaks <- melt(as.data.table(breaks), variable.name = "percentile", value.name = "income")
df <- as.data.table(df$variables)
income_groups <- c("[0 - 1)", "[1, 50)", "[50, 90)", "[90, 99)", "99+")
# Note: For cut to work, I need breaks to include the lowest value in the data
# as a starting value:
percentile_categories <- cut(hh_inc, breaks = c(min(hh_inc), breaks$income),
labels = income_groups, right = F, include.lowest = T)
return(percentile_categories)
}
cps[, hh_income_group := hh_income_share(.SD), by = "year"]
# Let's also use the naive household income rank to create income percentile groups
# matching FRED, then see how well these compare to the weighted version.
income_groups <- c("[0 - 1)", "[1, 50)", "[50, 90)", "[90, 99)", "99+")
cps[, hh_income_group_unweighted := cut(hh_income_rank, breaks = c(0, 0.01, 0.5, 0.9, 0.99, 1),
labels = income_groups, right = F, include.lowest = T)]
# How often does the unweighted estimate not match the weighted estimate? Get number
# of rows in the dataset, then compare to number of rows in filtered dataset
# where income groups do not match.
n_total <- dim(cps)[1]
n_diff  <- dim(cps[hh_income_group != hh_income_group_unweighted])[1]
n_diff/n_total
# Only 1.5% of the sample isn't matching. This doesn't seem like a huge deal
# to me so I'll neglect to incorporate weights for now.
# Income welfare and income rent have substantial missingness and a lack of variation
# So let's just drop these:
cps[, income_rent := NULL]
cps[, income_welfare := NULL]
cps[, total_weeks := NULL]
cps[, adjustment := NULL]
cps_share <- cps[pid == 1, .(year, hh_income_group, hh_income)]
cps_share[, income_total := sum(.SD$hh_income), by = "year"]
cps_share[, income_percentile := sum(.SD$hh_income), by = c("year", "hh_income_group")]
cps_share[, income_share := income_percentile/income_total]
cps_share <- unique(cps_share[, .(year, hh_income_group, income_share)])
# Sanity check: Does the share of income sum to 1 each year?
cps_share[, sum(.SD$income_share), by = "year"]
cps[, mean_hours_percentile := mean(.SD$hours_per_week, na.rm = T), by = c("year", "hh_income_group")]
cps[, top_earner := max(p_income), by = "hhid"]
cps[, top_earner := ifelse(p_income == top_earner, 1, 0), by = "hhid"]
df_plot <- cps[top_earner == 1 & employment_status == "employed" & !is.na(hours_per_week), ]
df_plot <- df_plot[hh_income_group != "[0 - 1)" & hh_income_group != "99+"]
mod_hours <- lm(hours_per_week ~ year*hh_income_group, data = df_plot)
df_plot[, preds := predict(mod_hours, newdata = data.frame("year" = 1980:2023,
"hh_income_group" = unique(df_plot$hh_income_group)))]
df_plot[, preds := predict(mod_hours, newdata = expand.grid("year" = 1980:2023,
"hh_income_group" = unique(df_plot$hh_income_group)))]
help(predict)
pred_data <- expand.grid("year" = 1980:2023,
"hh_income_group" = unique(df_plot$hh_income_group))
preds <- predict(mod_hours, newdata = pred_data)
preds
pred_data[, preds := predict(mod_hours, newdata = pred_data)]
pred_data <- setDT(expand.grid("year" = 1980:2023,
"hh_income_group" = unique(df_plot$hh_income_group)))
pred_data[, preds := predict(mod_hours, newdata = pred_data)]
ggplot(df_plot, aes(x = year, y = mean_hours_percentile, color = hh_income_group)) +
geom_point(alpha = 0.1) +
geom_line(data = pred_data, aes(y = preds), size = 1) +
labs(x = "Year", y = "Average hours worked",
fill = "Income percentile") +
guides(color = "none") +
theme_bw() +
theme(legend.position = "bottom")
2+2
gc()
